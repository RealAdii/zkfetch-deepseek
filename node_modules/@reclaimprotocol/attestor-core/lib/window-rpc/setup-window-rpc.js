"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupWindowRpc = setupWindowRpc;
const tls_1 = require("@reclaimprotocol/tls");
const create_claim_on_avs_1 = require("../avs/client/create-claim-on-avs");
const client_1 = require("../client");
const utils_1 = require("../providers/http/utils");
const utils_2 = require("../utils");
const b64_json_1 = require("../utils/b64-json");
const benchmark_1 = require("../utils/benchmark");
const utils_3 = require("../window-rpc/utils");
const window_rpc_zk_1 = require("../window-rpc/window-rpc-zk");
class WindowRPCEvent extends Event {
    constructor(data) {
        super('message');
        this.data = data;
    }
}
const VALID_MODULES = [
    'attestor-core',
    'witness-sdk'
];
let logger = utils_2.logger;
/**
 * Sets up the current window to listen for RPC requests
 * from React Native or other windows
 */
function setupWindowRpc() {
    logger = (0, utils_2.makeLogger)(true);
    window.addEventListener('message', handleMessage, false);
    const windowMsgs = new EventTarget();
    const defaultUrl = (0, utils_3.getWsApiUrlFromLocation)();
    logger.info({ defaultUrl }, 'window RPC setup');
    async function handleMessage(event) {
        let id = '';
        let channel = '';
        try {
            if (!event.data) {
                return;
            }
            const req = (typeof event.data === 'string'
                ? JSON.parse(event.data, b64_json_1.B64_JSON_REVIVER)
                : event.data);
            logger.debug({ req, origin: event.origin }, 'recv RPC message');
            // ignore any messages not for us
            if (!VALID_MODULES.includes(req.module)) {
                return;
            }
            id = req.id;
            channel = req.channel || '';
            windowMsgs.dispatchEvent(new WindowRPCEvent(req));
            // ignore response messages
            if (('isResponse' in req && req.isResponse)) {
                return;
            }
            if (!req.id) {
                logger.warn({ req }, 'Window RPC request missing ID');
                return;
            }
            logger.info({ req, origin: event.origin }, 'processing RPC request');
            switch (req.type) {
                case 'createClaim':
                    const claimTunnelRes = await (0, client_1.createClaimOnAttestor)({
                        ...req.request,
                        context: req.request.context
                            ? JSON.parse(req.request.context)
                            : undefined,
                        zkOperators: getZkOperators(req.request.zkOperatorMode, req.request.zkEngine),
                        oprfOperators: getOprfOperators(req.request.zkOperatorMode, req.request.zkEngine),
                        client: {
                            url: defaultUrl,
                            authRequest: req.request.authRequest
                        },
                        logger,
                        onStep(step) {
                            sendMessage({
                                type: 'createClaimStep',
                                step: {
                                    name: req.module.includes('witness')
                                        // backwards compatibility
                                        ? 'witness-progress'
                                        : 'attestor-progress',
                                    step,
                                },
                                module: req.module,
                                id: req.id,
                            });
                        },
                        updateProviderParams: req.request.updateProviderParams
                            ? updateProviderParams
                            : undefined
                    });
                    const response = (0, utils_3.mapToCreateClaimResponse)(claimTunnelRes);
                    respond({
                        type: 'createClaimDone',
                        response,
                    });
                    break;
                case 'createClaimOnAvs':
                    const avsRes = await (0, create_claim_on_avs_1.createClaimOnAvs)({
                        ...req.request,
                        payer: req.request.payer === 'attestor'
                            ? { attestor: defaultUrl }
                            : undefined,
                        context: req.request.context
                            ? JSON.parse(req.request.context)
                            : undefined,
                        zkOperators: getZkOperators(req.request.zkOperatorMode, req.request.zkEngine),
                        oprfOperators: getOprfOperators(req.request.zkOperatorMode, req.request.zkEngine),
                        logger,
                        onStep(step) {
                            sendMessage({
                                type: 'createClaimOnAvsStep',
                                step,
                                module: req.module,
                                id: req.id,
                            });
                        },
                    });
                    respond({
                        type: 'createClaimOnAvsDone',
                        response: avsRes,
                    });
                    break;
                case 'extractHtmlElement':
                    respond({
                        type: 'extractHtmlElementDone',
                        response: (0, utils_1.extractHTMLElement)(req.request.html, req.request.xpathExpression, req.request.contentsOnly),
                    });
                    break;
                case 'extractJSONValueIndex':
                    respond({
                        type: 'extractJSONValueIndexDone',
                        response: (0, utils_1.extractJSONValueIndex)(req.request.json, req.request.jsonPath),
                    });
                    break;
                case 'getCurrentMemoryUsage':
                    respond({
                        type: 'getCurrentMemoryUsageDone',
                        response: await (0, utils_3.getCurrentMemoryUsage)(),
                    });
                    break;
                case 'setLogLevel':
                    logger = (0, utils_2.makeLogger)(true, req.request.logLevel, req.request.sendLogsToApp
                        ? (level, message) => (sendMessage({
                            type: 'log',
                            level,
                            message,
                            module: req.module,
                            id: req.id,
                        }))
                        : undefined);
                    respond({
                        type: 'setLogLevelDone',
                        response: undefined
                    });
                    break;
                case 'benchmarkZK':
                    respond({
                        type: 'benchmarkZKDone',
                        response: await (0, benchmark_1.Benchmark)(),
                    });
                    break;
                default:
                    break;
            }
        }
        catch (err) {
            logger.error({ msg: err.message, err, data: event.data }, 'error in RPC');
            respond({
                type: 'error',
                data: {
                    message: err.message,
                    stack: err.stack,
                }
            });
        }
        function getZkOperators(mode = 'default', zkEngine = 'snarkjs') {
            // use default snarkJS ops
            if (mode === 'default') {
                return;
            }
            // the native app/window calling implements
            // a ZK operator & wants to use it
            const operators = {};
            for (const alg of window_rpc_zk_1.ALL_ENC_ALGORITHMS) {
                operators[alg] = (0, window_rpc_zk_1.makeWindowRpcZkOperator)(alg, makeCommunicationBridge(), zkEngine);
            }
            return operators;
        }
        function getOprfOperators(mode = 'default', zkEngine = 'snarkjs') {
            // use default webview ops
            if (mode === 'default') {
                return;
            }
            // the native app/window calling implements
            // a ZK operator & wants to use it
            const operators = {};
            for (const alg of window_rpc_zk_1.ALL_ENC_ALGORITHMS) {
                operators[alg] = (0, window_rpc_zk_1.makeWindowRpcOprfOperator)(alg, makeCommunicationBridge(), zkEngine);
            }
            return operators;
        }
        function makeCommunicationBridge() {
            return {
                send: sendMessage,
                onMessage(cb) {
                    windowMsgs.addEventListener('message', handle);
                    return () => {
                        windowMsgs.removeEventListener('message', handle);
                    };
                    function handle(msg) {
                        cb(msg.data);
                    }
                },
            };
        }
        function respond(data) {
            const res = {
                ...data,
                id,
                module: 'attestor-core',
                isResponse: true
            };
            return sendMessage(res);
        }
        function sendMessage(data) {
            var _a;
            const str = JSON.stringify(data, b64_json_1.B64_JSON_REPLACER);
            if (channel) {
                (_a = window[channel]) === null || _a === void 0 ? void 0 : _a.postMessage(str);
            }
            else {
                event.source.postMessage(str);
            }
        }
        async function updateProviderParams(transcript, tlsVersion) {
            const { req, res } = (0, utils_1.generateRequstAndResponseFromTranscript)(transcript, tlsVersion);
            const bridge = makeCommunicationBridge();
            const id = (0, utils_3.generateRpcRequestId)();
            const waitForRes = (0, utils_3.waitForResponse)('updateProviderParams', id, bridge);
            bridge.send({
                type: 'updateProviderParams',
                id,
                request: {
                    request: {
                        ...req,
                        body: req.body
                            ? (0, tls_1.uint8ArrayToStr)(req.body)
                            : undefined
                    },
                    response: { ...res, body: (0, tls_1.uint8ArrayToStr)(res.body) },
                },
                module: 'attestor-core'
            });
            return await waitForRes;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,