"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeZkProofGenerator = makeZkProofGenerator;
exports.verifyZkPacket = verifyZkPacket;
exports.makeDefaultZkOperator = makeDefaultZkOperator;
exports.makeDefaultOPRFOperator = makeDefaultOPRFOperator;
exports.getEngineString = getEngineString;
exports.getEngineProto = getEngineProto;
const tls_1 = require("@reclaimprotocol/tls");
const zk_symmetric_crypto_1 = require("@reclaimprotocol/zk-symmetric-crypto");
const config_1 = require("../config");
const api_1 = require("../proto/api");
const env_1 = require("../utils/env");
const error_1 = require("../utils/error");
const generics_1 = require("../utils/generics");
const logger_1 = require("../utils/logger");
const redactions_1 = require("../utils/redactions");
const ZK_CONCURRENCY = +((0, env_1.getEnvVariable)('ZK_CONCURRENCY')
    || config_1.DEFAULT_ZK_CONCURRENCY);
async function makeZkProofGenerator({ zkOperators, oprfOperators, logger = logger_1.logger, zkProofConcurrency = ZK_CONCURRENCY, maxZkChunks = config_1.MAX_ZK_CHUNKS, cipherSuite, zkEngine = 'snarkjs' }) {
    const { default: PQueue } = await import('p-queue');
    const zkQueue = new PQueue({
        concurrency: zkProofConcurrency,
        autoStart: true,
    });
    const packetsToProve = [];
    logger = (logger || logger_1.logger).child({ module: 'zk', zkEngine: zkEngine });
    let zkChunksToProve = 0;
    return {
        /**
         * Adds the given packet to the list of packets to
         * generate ZK proofs for.
         *
         * Call `generateProofs()` to finally generate the proofs
         */
        async addPacketToProve(packet, { redactedPlaintext, toprfs }, onGeneratedProofs) {
            if (packet.type === 'plaintext') {
                throw new Error('Cannot generate proof for plaintext');
            }
            const alg = (0, generics_1.getZkAlgorithmForCipherSuite)(cipherSuite);
            const chunkSizeBytes = getChunkSizeBytes(alg);
            //const { redactedPlaintext } = reveal
            const key = await tls_1.crypto.exportKey(packet.encKey);
            const iv = packet.iv;
            const ciphertext = (0, generics_1.getPureCiphertext)(packet.ciphertext, cipherSuite);
            const chunks = Math.ceil(ciphertext.length / chunkSizeBytes);
            const packetToProve = {
                onGeneratedProofs,
                algorithm: alg,
                proofsToGenerate: [],
                iv: packet.fixedIv,
            };
            const chunksDone = new Set();
            // first we'll handle all TOPRF blocks
            // we do these first, because they can span multiple chunks
            // & we need to be able to span the right chunks
            for (const toprf of toprfs || []) {
                const startChunk = Math.floor(toprf.dataLocation.fromIndex / chunkSizeBytes);
                if (chunksDone.has(startChunk)) {
                    throw new error_1.AttestorError('ERROR_BAD_REQUEST', `Chunk ${startChunk} contains more than one TOPRF,`
                        + ' which is not supported');
                }
                addProofToGenerate(startChunk, {
                    ...toprf,
                    dataLocation: {
                        ...toprf.dataLocation,
                        fromIndex: toprf.dataLocation.fromIndex % chunkSizeBytes
                    }
                });
            }
            for (let i = 0; i < chunks; i++) {
                // ignore any TOPRF chunks
                if (chunksDone.has(i)) {
                    continue;
                }
                addProofToGenerate(i);
            }
            // generate proofs in order of start index
            packetToProve.proofsToGenerate
                .sort((a, b) => a.startIdx - b.startIdx);
            packetsToProve.push(packetToProve);
            function addProofToGenerate(offsetChunks, toprf) {
                chunksDone.add(offsetChunks);
                const proofParams = getProofGenerationParamsForChunk(alg, {
                    key,
                    iv,
                    ciphertext,
                    redactedPlaintext,
                    offsetChunks,
                    toprf,
                });
                if (!proofParams) {
                    return;
                }
                packetToProve.proofsToGenerate.push(proofParams);
                zkChunksToProve += 1;
                if (zkChunksToProve > maxZkChunks) {
                    throw new Error('Too many chunks to prove:'
                        + ` ${zkChunksToProve} > ${maxZkChunks}`);
                }
            }
        },
        getTotalChunksToProve() {
            return zkChunksToProve;
        },
        async generateProofs(onChunkDone) {
            var _a;
            if (!packetsToProve.length) {
                return;
            }
            const start = Date.now();
            const tasks = [];
            for (const { onGeneratedProofs, algorithm, proofsToGenerate } of packetsToProve) {
                const proofs = [];
                let proofsLeft = proofsToGenerate.length;
                for (const proofToGen of proofsToGenerate) {
                    tasks.push(zkQueue.add(async () => {
                        const proof = await generateProofForChunk(algorithm, proofToGen);
                        onChunkDone === null || onChunkDone === void 0 ? void 0 : onChunkDone();
                        proofs.push(proof);
                        proofsLeft -= 1;
                        if (proofsLeft === 0) {
                            onGeneratedProofs(proofs);
                        }
                    }, { throwOnTimeout: true }));
                }
            }
            await Promise.all(tasks);
            logger === null || logger === void 0 ? void 0 : logger.info({
                durationMs: Date.now() - start,
                chunks: zkChunksToProve,
            }, 'generated ZK proofs');
            // reset the packets to prove
            packetsToProve.splice(0, packetsToProve.length);
            zkChunksToProve = 0;
            // release ZK resources to free up memory
            const alg = (0, generics_1.getZkAlgorithmForCipherSuite)(cipherSuite);
            const zkOperator = await getZkOperatorForAlgorithm(alg);
            (_a = zkOperator.release) === null || _a === void 0 ? void 0 : _a.call(zkOperator);
        },
    };
    async function generateProofForChunk(algorithm, { startIdx, redactedPlaintext, privateInput, publicInput, toprf, }) {
        const operator = toprf
            ? getOprfOperatorForAlgorithm(algorithm)
            : getZkOperatorForAlgorithm(algorithm);
        const proof = await (0, zk_symmetric_crypto_1.generateProof)({
            algorithm,
            privateInput,
            publicInput,
            operator,
            logger,
            ...(toprf
                ? {
                    toprf: {
                        pos: toprf.dataLocation.fromIndex,
                        len: toprf.dataLocation.length,
                        output: toprf.nullifier,
                        responses: toprf.responses,
                        domainSeparator: config_1.TOPRF_DOMAIN_SEPARATOR
                    },
                    mask: toprf.mask,
                }
                : {})
        });
        logger === null || logger === void 0 ? void 0 : logger.debug({ startIdx }, 'generated proof for chunk');
        return {
            // backwards compatibility
            proofJson: '',
            proofData: typeof proof.proofData === 'string'
                ? (0, tls_1.strToUint8Array)(proof.proofData)
                : proof.proofData,
            toprf,
            decryptedRedactedCiphertext: proof.plaintext,
            redactedPlaintext,
            startIdx
        };
    }
    function getZkOperatorForAlgorithm(algorithm) {
        return (zkOperators === null || zkOperators === void 0 ? void 0 : zkOperators[algorithm])
            || makeDefaultZkOperator(algorithm, zkEngine, logger);
    }
    function getOprfOperatorForAlgorithm(algorithm) {
        return (oprfOperators === null || oprfOperators === void 0 ? void 0 : oprfOperators[algorithm])
            || makeDefaultOPRFOperator(algorithm, zkEngine, logger);
    }
}
/**
 * Verify the given ZK proof
 */
async function verifyZkPacket({ cipherSuite, ciphertext, zkReveal, zkOperators, oprfOperators, logger = logger_1.logger, zkEngine = 'snarkjs', iv, recordNumber }) {
    if (!zkReveal) {
        throw new Error('No ZK reveal');
    }
    const { proofs } = zkReveal;
    const algorithm = (0, generics_1.getZkAlgorithmForCipherSuite)(cipherSuite);
    const recordIV = (0, generics_1.getRecordIV)(ciphertext, cipherSuite);
    ciphertext = (0, generics_1.getPureCiphertext)(ciphertext, cipherSuite);
    /**
     * to verify if the user has given us the correct redacted plaintext,
     * and isn't providing plaintext that they haven't proven they have
     * we start with a fully redacted plaintext, and then replace the
     * redacted parts with the plaintext that the user has provided
     * in the proofs
     */
    const realRedactedPlaintext = new Uint8Array(ciphertext.length).fill(redactions_1.REDACTION_CHAR_CODE);
    const alg = (0, generics_1.getZkAlgorithmForCipherSuite)(cipherSuite);
    const chunkSizeBytes = getChunkSizeBytes(alg);
    await Promise.all(proofs.map(async (proof, i) => {
        try {
            await verifyProofPacket(proof);
        }
        catch (e) {
            e.message += ` (chunk ${i}, startIdx ${proof.startIdx})`;
            throw e;
        }
    }));
    return { redactedPlaintext: realRedactedPlaintext };
    async function verifyProofPacket({ proofData, proofJson, decryptedRedactedCiphertext, redactedPlaintext, startIdx, toprf, }) {
        var _a, _b, _c;
        // get the ciphertext chunk we received from the server
        // the ZK library, will verify that the decrypted redacted
        // ciphertext matches the ciphertext received from the server
        const ciphertextChunk = ciphertext.slice(startIdx, startIdx + redactedPlaintext.length);
        // redact ciphertext if plaintext is redacted
        // to prepare for decryption in ZK circuit
        // the ZK circuit will take in the redacted ciphertext,
        // which shall produce the redacted plaintext
        for (let i = 0; i < ciphertextChunk.length; i++) {
            if (redactedPlaintext[i] === redactions_1.REDACTION_CHAR_CODE) {
                ciphertextChunk[i] = redactions_1.REDACTION_CHAR_CODE;
            }
        }
        // redact OPRF indices -- because they'll incorrectly
        // be marked as incongruent
        let comparePlaintext = redactedPlaintext;
        if (toprf) {
            comparePlaintext = new Uint8Array(redactedPlaintext);
            for (let i = 0; i < toprf.dataLocation.length; i++) {
                comparePlaintext[i + toprf.dataLocation.fromIndex] = redactions_1.REDACTION_CHAR_CODE;
            }
            // the transcript will contain only the stringified
            // nullifier. So here, we'll compare the provable
            // binary nullifier with the stringified nullifier
            // that the user has provided
            const nulliferStr = (0, redactions_1.binaryHashToStr)(toprf.nullifier, toprf.dataLocation.length);
            const txtHash = redactedPlaintext.slice((_a = toprf.dataLocation) === null || _a === void 0 ? void 0 : _a.fromIndex, ((_b = toprf.dataLocation) === null || _b === void 0 ? void 0 : _b.fromIndex)
                + ((_c = toprf.dataLocation) === null || _c === void 0 ? void 0 : _c.length));
            if ((0, generics_1.uint8ArrayToStr)(txtHash) !== nulliferStr
                .slice(0, txtHash.length)) {
                throw new Error('OPRF nullifier not congruent');
            }
        }
        if (!(0, redactions_1.isRedactionCongruent)(comparePlaintext, decryptedRedactedCiphertext)) {
            throw new Error('redacted ciphertext not congruent');
        }
        const chunkIndex = startIdx / chunkSizeBytes;
        let nonce = (0, tls_1.concatenateUint8Arrays)([iv, recordIV]);
        if (!recordIV.length) {
            nonce = (0, tls_1.generateIV)(nonce, recordNumber);
        }
        await (0, zk_symmetric_crypto_1.verifyProof)({
            proof: {
                algorithm,
                proofData: proofData.length
                    ? proofData
                    : (0, tls_1.strToUint8Array)(proofJson),
                plaintext: decryptedRedactedCiphertext,
            },
            publicInput: {
                ciphertext: ciphertextChunk,
                iv: nonce,
                offset: chunkIndex
            },
            logger,
            ...(toprf
                ? {
                    operator: getOprfOperator(),
                    toprf: {
                        pos: toprf.dataLocation.fromIndex,
                        len: toprf.dataLocation.length,
                        domainSeparator: config_1.TOPRF_DOMAIN_SEPARATOR,
                        output: toprf.nullifier,
                        responses: toprf.responses,
                    }
                }
                : { operator: getZkOperator() })
        });
        logger === null || logger === void 0 ? void 0 : logger.debug({ startIdx, endIdx: startIdx + redactedPlaintext.length }, 'verified proof');
        realRedactedPlaintext.set(redactedPlaintext, startIdx);
    }
    function getZkOperator() {
        return (zkOperators === null || zkOperators === void 0 ? void 0 : zkOperators[algorithm])
            || makeDefaultZkOperator(algorithm, zkEngine, logger);
    }
    function getOprfOperator() {
        return (oprfOperators === null || oprfOperators === void 0 ? void 0 : oprfOperators[algorithm])
            || makeDefaultOPRFOperator(algorithm, zkEngine, logger);
    }
}
function getChunkSizeBytes(alg) {
    const { chunkSize, bitsPerWord } = zk_symmetric_crypto_1.CONFIG[alg];
    return chunkSize * bitsPerWord / 8;
}
const zkEngines = {};
const oprfEngines = {};
const operatorMakers = {
    'snarkjs': zk_symmetric_crypto_1.makeSnarkJsZKOperator,
    'gnark': zk_symmetric_crypto_1.makeGnarkZkOperator,
};
const OPRF_OPERATOR_MAKERS = {
    'gnark': zk_symmetric_crypto_1.makeGnarkOPRFOperator
};
function makeDefaultZkOperator(algorithm, zkEngine, logger) {
    let zkOperators = zkEngines[zkEngine];
    if (!zkOperators) {
        zkEngines[zkEngine] = {};
        zkOperators = zkEngines[zkEngine];
    }
    if (!zkOperators[algorithm]) {
        const isNode = (0, env_1.detectEnvironment)() === 'node';
        const opType = isNode ? 'local' : 'remote';
        logger === null || logger === void 0 ? void 0 : logger.info({ type: opType, algorithm }, 'fetching zk operator');
        const fetcher = opType === 'local'
            ? (0, zk_symmetric_crypto_1.makeLocalFileFetch)()
            : (0, zk_symmetric_crypto_1.makeRemoteFileFetch)({
                baseUrl: config_1.DEFAULT_REMOTE_FILE_FETCH_BASE_URL,
            });
        const maker = operatorMakers[zkEngine];
        if (!maker) {
            throw new Error(`No ZK operator maker for ${zkEngine}`);
        }
        zkOperators[algorithm] = maker({ algorithm, fetcher });
    }
    return zkOperators[algorithm];
}
function makeDefaultOPRFOperator(algorithm, zkEngine, logger) {
    let operators = oprfEngines[zkEngine];
    if (!operators) {
        oprfEngines[zkEngine] = {};
        operators = oprfEngines[zkEngine];
    }
    if (!operators[algorithm]) {
        const isNode = (0, env_1.detectEnvironment)() === 'node';
        const type = isNode ? 'local' : 'remote';
        logger === null || logger === void 0 ? void 0 : logger.info({ type, algorithm }, 'fetching oprf operator');
        const fetcher = type === 'local'
            ? (0, zk_symmetric_crypto_1.makeLocalFileFetch)()
            : (0, zk_symmetric_crypto_1.makeRemoteFileFetch)({
                baseUrl: config_1.DEFAULT_REMOTE_FILE_FETCH_BASE_URL,
            });
        const maker = OPRF_OPERATOR_MAKERS[zkEngine];
        if (!maker) {
            throw new Error(`No OPRF operator maker for ${zkEngine}`);
        }
        operators[algorithm] = maker({ algorithm, fetcher });
    }
    return operators[algorithm];
}
function getEngineString(engine) {
    if (engine === api_1.ZKProofEngine.ZK_ENGINE_GNARK) {
        return 'gnark';
    }
    if (engine === api_1.ZKProofEngine.ZK_ENGINE_SNARKJS) {
        return 'snarkjs';
    }
    throw new Error(`Unknown ZK engine: ${engine}`);
}
function getEngineProto(engine) {
    if (engine === 'gnark') {
        return api_1.ZKProofEngine.ZK_ENGINE_GNARK;
    }
    if (engine === 'snarkjs') {
        return api_1.ZKProofEngine.ZK_ENGINE_SNARKJS;
    }
    throw new Error(`Unknown ZK engine: ${engine}`);
}
function getProofGenerationParamsForChunk(algorithm, { key, iv, ciphertext, redactedPlaintext, offsetChunks, toprf, }) {
    const chunkSize = getChunkSizeBytes(algorithm);
    const startIdx = offsetChunks * chunkSize;
    const endIdx = (offsetChunks + 1) * chunkSize;
    const ciphertextChunk = ciphertext
        .slice(startIdx, endIdx);
    const plaintextChunk = redactedPlaintext
        .slice(startIdx, endIdx);
    if ((0, redactions_1.isFullyRedacted)(plaintextChunk)) {
        return;
    }
    // redact ciphertext if plaintext is redacted
    // to prepare for decryption in ZK circuit
    // the ZK circuit will take in the redacted ciphertext,
    // which shall produce the redacted plaintext
    for (let i = 0; i < ciphertextChunk.length; i++) {
        if (plaintextChunk[i] === redactions_1.REDACTION_CHAR_CODE) {
            ciphertextChunk[i] = redactions_1.REDACTION_CHAR_CODE;
        }
    }
    return {
        startIdx,
        redactedPlaintext: plaintextChunk,
        privateInput: { key },
        publicInput: { ciphertext: ciphertextChunk, iv, offset: offsetChunks },
        toprf
    };
}
//# sourceMappingURL=data:application/json;base64,