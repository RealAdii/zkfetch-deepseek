"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tls_1 = require("@reclaimprotocol/tls");
const utils_1 = require("ethers/lib/utils");
const config_1 = require("../../config");
const utils_2 = require("../../providers/http/utils");
const utils_3 = require("../../utils");
const HTTP_BASE64_PROVIDER = {
    hostPort: getHostPort,
    writeRedactionMode(params) {
        return ('writeRedactionMode' in params)
            ? params.writeRedactionMode
            : undefined;
    },
    geoLocation(params) {
        return ('geoLocation' in params)
            ? getGeoLocation(params)
            : undefined;
    },
    additionalClientOptions(params) {
        let defaultOptions = {
            applicationLayerProtocols: ['http/1.1']
        };
        if ('additionalClientOptions' in params) {
            defaultOptions = {
                ...defaultOptions,
                ...params.additionalClientOptions
            };
        }
        return defaultOptions;
    },
    createRequest(secretParams, params) {
        if (!secretParams.cookieStr &&
            !secretParams.authorisationHeader &&
            !secretParams.headers) {
            throw new Error('auth parameters are not set');
        }
        const pubHeaders = params.headers || {};
        const secHeaders = { ...secretParams.headers };
        if (secretParams.cookieStr) {
            secHeaders['Cookie'] = secretParams.cookieStr;
        }
        if (secretParams.authorisationHeader) {
            secHeaders['Authorization'] = secretParams.authorisationHeader;
        }
        const hasUserAgent = Object.keys(pubHeaders)
            .some(k => k.toLowerCase() === 'user-agent') ||
            Object.keys(secHeaders)
                .some(k => k.toLowerCase() === 'user-agent');
        if (!hasUserAgent) {
            //only set user-agent if not set by provider
            pubHeaders['User-Agent'] = config_1.RECLAIM_USER_AGENT;
        }
        const url = new URL(params.url);
        const { pathname } = url;
        const searchParams = params.url.includes('?') ? params.url.split('?')[1] : '';
        utils_3.logger.info({ url: params.url, path: pathname, query: searchParams.toString() });
        const body = params.body instanceof Uint8Array
            ? params.body
            : (0, tls_1.strToUint8Array)(params.body || '');
        const contentLength = body.length;
        const reqLine = `${params.method} ${pathname}${(searchParams === null || searchParams === void 0 ? void 0 : searchParams.length) ? '?' + searchParams : ''} HTTP/1.1`;
        const secHeadersList = (0, utils_2.buildHeaders)(secHeaders);
        utils_3.logger.info({ requestLine: reqLine });
        const httpReqHeaderStr = [
            reqLine,
            `Host: ${getHostHeaderString(url)}`,
            `Content-Length: ${contentLength}`,
            'Connection: close',
            //no compression
            'Accept-Encoding: identity',
            ...(0, utils_2.buildHeaders)(pubHeaders),
            ...secHeadersList,
            '\r\n',
        ].join('\r\n');
        const headerStr = (0, tls_1.strToUint8Array)(httpReqHeaderStr);
        const data = (0, tls_1.concatenateUint8Arrays)([headerStr, body]);
        // hide all secret headers
        const secHeadersStr = secHeadersList.join('\r\n');
        const tokenStartIndex = (0, utils_3.findIndexInUint8Array)(data, (0, tls_1.strToUint8Array)(secHeadersStr));
        const redactions = [
            {
                fromIndex: tokenStartIndex,
                toIndex: tokenStartIndex + secHeadersStr.length,
            }
        ];
        return {
            data,
            redactions: redactions,
        };
    },
    getResponseRedactions() {
        return [];
    },
    assertValidProviderReceipt(receipt, params) {
        var _a;
        const extractedParams = {};
        const req = (0, utils_3.getHttpRequestDataFromTranscript)(receipt);
        if (req.method !== params.method.toLowerCase()) {
            throw new Error(`Invalid method: ${req.method}`);
        }
        const url = new URL(params.url);
        const { protocol, pathname } = url;
        if (protocol !== 'https:') {
            utils_3.logger.error('params URL: %s', params.url);
            throw new Error(`Expected protocol: https, found: ${protocol}`);
        }
        const searchParams = params.url.includes('?') ? params.url.split('?')[1] : '';
        const expectedPath = pathname + ((searchParams === null || searchParams === void 0 ? void 0 : searchParams.length) ? '?' + searchParams : '');
        if (req.url !== expectedPath) {
            utils_3.logger.error('params URL: %s', params.url);
            throw new Error(`Expected path: ${expectedPath}, found: ${req.url}`);
        }
        const expectedHostStr = getHostHeaderString(url);
        if (req.headers.host !== expectedHostStr) {
            throw new Error(`Expected host: ${expectedHostStr}, found: ${req.headers.host}`);
        }
        const connectionHeader = req.headers['connection'];
        if (connectionHeader !== 'close') {
            throw new Error(`Connection header must be "close", got "${connectionHeader}"`);
        }
        const serverBlocks = receipt
            .filter(s => s.sender === 'server')
            .map((r) => r.message)
            .filter(b => !b.every(b => b === utils_3.REDACTION_CHAR_CODE)); // filter out fully redacted blocks
        const response = concatArrays(...serverBlocks);
        const res = (0, utils_2.parseHttpResponse)(response);
        if (((res.statusCode / 100) >> 0) !== 2) {
            throw new Error(`Provider returned ${res.statusCode} ${res.statusMessage} error`);
        }
        const bodyStartIdx = (_a = res.bodyStartIndex) !== null && _a !== void 0 ? _a : 0;
        if (bodyStartIdx < 4) {
            utils_3.logger.error({ response: (0, utils_3.uint8ArrayToBinaryStr)(response) });
            throw new Error('Failed to find response body');
        }
        extractedParams['data'] = utils_1.base64.encode(res.body);
        return { extractedParameters: extractedParams };
    },
};
function concatArrays(...bufs) {
    const totalSize = bufs.reduce((acc, e) => acc + e.length, 0);
    const merged = new Uint8Array(totalSize);
    let lenDone = 0;
    for (const array of bufs) {
        merged.set(array, lenDone);
        lenDone += array.length;
    }
    return merged;
}
function getHostPort(params) {
    const { host } = new URL(getURL(params));
    if (!host) {
        throw new Error('url is incorrect');
    }
    return host;
}
/**
 * Obtain the host header string from the URL.
 * https://stackoverflow.com/a/3364396
 */
function getHostHeaderString(url) {
    const host = url.hostname;
    const port = url.port;
    return port && +port !== config_1.DEFAULT_HTTPS_PORT
        ? `${host}:${port}`
        : host;
}
const paramsRegex = /\{\{([^{}]+)}}/sgi;
function getGeoLocation(v2Params) {
    if (v2Params === null || v2Params === void 0 ? void 0 : v2Params.geoLocation) {
        const paramNames = new Set();
        let geo = v2Params.geoLocation;
        //extract param names
        let match = null;
        while (match = paramsRegex.exec(geo)) {
            paramNames.add(match[1]);
        }
        for (const pn of paramNames) {
            if (v2Params.paramValues && pn in v2Params.paramValues) {
                geo = geo.replaceAll(`{{${pn}}}`, v2Params.paramValues[pn].toString());
            }
            else {
                throw new Error(`parameter "${pn}" value not found in templateParams`);
            }
        }
        return geo;
    }
    return undefined;
}
function getURL(v2Params) {
    let hostPort = v2Params === null || v2Params === void 0 ? void 0 : v2Params.url;
    const paramNames = new Set();
    //extract param names
    let match = null;
    while (match = paramsRegex.exec(hostPort)) {
        paramNames.add(match[1]);
    }
    for (const pn of paramNames) {
        if (v2Params.paramValues && pn in v2Params.paramValues) {
            hostPort = hostPort.replaceAll(`{{${pn}}}`, v2Params.paramValues[pn].toString());
        }
        else {
            throw new Error(`parameter "${pn}" value not found in templateParams`);
        }
    }
    return hostPort;
}
exports.default = HTTP_BASE64_PROVIDER;
//# sourceMappingURL=data:application/json;base64,