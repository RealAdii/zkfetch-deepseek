"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertValidClaimRequest = assertValidClaimRequest;
exports.assertValidProviderTranscript = assertValidProviderTranscript;
exports.assertTranscriptsMatch = assertTranscriptsMatch;
exports.decryptTranscript = decryptTranscript;
exports.getWithoutHeader = getWithoutHeader;
const tls_1 = require("@reclaimprotocol/tls");
const api_1 = require("../../proto/api");
const providers_1 = require("../../providers");
const generics_1 = require("../../server/utils/generics");
const process_handshake_1 = require("../../server/utils/process-handshake");
const utils_1 = require("../../utils");
const signatures_1 = require("../../utils/signatures");
/**
 * Asserts that the claim request is valid.
 *
 * 1. We begin by verifying the signature of the claim request.
 * 2. Next, we produce the transcript of the TLS exchange
 * from the proofs provided by the client.
 * 3. We then pull the provider the client is trying to claim
 * from
 * 4. We then use the provider's verification function to verify
 *  whether the claim is valid.
 *
 * If any of these steps fail, we throw an error.
 */
async function assertValidClaimRequest(request, metadata, logger) {
    var _a;
    const { data, signatures: { requestSignature } = {}, zkEngine, fixedServerIV, fixedClientIV } = request;
    if (!data) {
        throw new utils_1.AttestorError('ERROR_INVALID_CLAIM', 'No info provided on claim request');
    }
    if (!(requestSignature === null || requestSignature === void 0 ? void 0 : requestSignature.length)) {
        throw new utils_1.AttestorError('ERROR_INVALID_CLAIM', 'No signature provided on claim request');
    }
    // verify request signature
    const serialisedReq = api_1.ClaimTunnelRequest
        .encode({ ...request, signatures: undefined })
        .finish();
    const { verify: verifySig } = signatures_1.SIGNATURES[metadata.signatureType];
    const verified = await verifySig(serialisedReq, requestSignature, data.owner);
    if (!verified) {
        throw new utils_1.AttestorError('ERROR_INVALID_CLAIM', 'Invalid signature on claim request');
    }
    const receipt = await decryptTranscript(request.transcript, logger, zkEngine === api_1.ZKProofEngine.ZK_ENGINE_GNARK ? 'gnark' : 'snarkjs', fixedServerIV, fixedClientIV);
    const reqHost = (_a = request.request) === null || _a === void 0 ? void 0 : _a.host;
    if (receipt.hostname !== reqHost) {
        throw new Error(`Expected server name ${reqHost}, got ${receipt.hostname}`);
    }
    // get all application data messages
    const applData = (0, utils_1.extractApplicationDataFromTranscript)(receipt);
    const newData = await assertValidProviderTranscript(applData, data, logger);
    if (newData !== data) {
        logger.info({ newData }, 'updated claim info');
    }
    return newData;
}
/**
 * Verify that the transcript contains a valid claim
 * for the provider.
 */
async function assertValidProviderTranscript(applData, info, logger) {
    var _a;
    const providerName = info.provider;
    const provider = providers_1.providers[providerName];
    if (!provider) {
        throw new utils_1.AttestorError('ERROR_INVALID_CLAIM', `Unsupported provider: ${providerName}`);
    }
    const params = (0, generics_1.niceParseJsonObject)(info.parameters, 'params');
    const ctx = (0, generics_1.niceParseJsonObject)(info.context, 'context');
    (0, utils_1.assertValidateProviderParams)(providerName, params);
    const rslt = await provider.assertValidProviderReceipt(applData, params, logger);
    const extractedParameters = (rslt === null || rslt === void 0 ? void 0 : rslt.extractedParameters) || {};
    if (!Object.keys(extractedParameters).length) {
        return info;
    }
    const newInfo = { ...info };
    ctx.extractedParameters = extractedParameters;
    ctx.providerHash = (0, utils_1.hashProviderParams)(params);
    newInfo.context = (_a = (0, utils_1.canonicalStringify)(ctx)) !== null && _a !== void 0 ? _a : '';
    return newInfo;
}
/**
 * Verify that the transcript provided by the client
 * matches the transcript of the tunnel, the server
 * has created.
 */
function assertTranscriptsMatch(clientTranscript, tunnelTranscript) {
    const clientSends = (0, tls_1.concatenateUint8Arrays)(clientTranscript
        .filter(m => m.sender === api_1.TranscriptMessageSenderType.TRANSCRIPT_MESSAGE_SENDER_TYPE_CLIENT)
        .map(m => m.message));
    const tunnelSends = (0, tls_1.concatenateUint8Arrays)(tunnelTranscript
        .filter(m => m.sender === 'client')
        .map(m => m.message));
    if (!(0, tls_1.areUint8ArraysEqual)(clientSends, tunnelSends)) {
        throw utils_1.AttestorError.badRequest('Outgoing messages from client do not match the tunnel transcript');
    }
    const clientRecvs = (0, tls_1.concatenateUint8Arrays)(clientTranscript
        .filter(m => m.sender === api_1.TranscriptMessageSenderType.TRANSCRIPT_MESSAGE_SENDER_TYPE_SERVER)
        .map(m => m.message));
    const tunnelRecvs = (0, tls_1.concatenateUint8Arrays)(tunnelTranscript
        .filter(m => m.sender === 'server')
        .map(m => m.message))
        // We only need to compare the first N messages
        // that the client claims to have received
        // the rest are not relevant -- so even if they're
        // not present in the tunnel transcript, it's fine
        .slice(0, clientRecvs.length);
    if (!(0, tls_1.areUint8ArraysEqual)(clientRecvs, tunnelRecvs)) {
        throw utils_1.AttestorError.badRequest('Incoming messages from server do not match the tunnel transcript');
    }
}
async function decryptTranscript(transcript, logger, zkEngine, serverIV, clientIV) {
    const { tlsVersion, cipherSuite, hostname, nextMsgIndex } = await (0, process_handshake_1.processHandshake)(transcript, logger);
    let clientRecordNumber = tlsVersion === 'TLS1_3' ? -1 : 0; // TLS 1.3 has already one record encrypted at this point
    let serverRecordNumber = clientRecordNumber;
    transcript = transcript.slice(nextMsgIndex);
    const decryptedTranscript = [];
    for (const [i, { sender, message, reveal: { zkReveal, directReveal } = {} }] of transcript.entries()) {
        //start with first message after last handshake message
        await getDecryptedMessage(sender, message, directReveal, zkReveal, i);
    }
    return {
        transcript: decryptedTranscript,
        hostname: hostname,
        tlsVersion: tlsVersion,
    };
    async function getDecryptedMessage(sender, message, directReveal, zkReveal, i) {
        var _a, _b;
        try {
            const isServer = sender === api_1.TranscriptMessageSenderType
                .TRANSCRIPT_MESSAGE_SENDER_TYPE_SERVER;
            const recordHeader = message.slice(0, 5);
            const content = getWithoutHeader(message);
            if (isServer) {
                serverRecordNumber++;
            }
            else {
                clientRecordNumber++;
            }
            let redacted = true;
            let plaintext = undefined;
            let plaintextLength;
            if ((_a = directReveal === null || directReveal === void 0 ? void 0 : directReveal.key) === null || _a === void 0 ? void 0 : _a.length) {
                const result = await (0, utils_1.decryptDirect)(directReveal, cipherSuite, recordHeader, tlsVersion, content);
                plaintext = result.plaintext;
                redacted = false;
                plaintextLength = plaintext.length;
            }
            else if ((_b = zkReveal === null || zkReveal === void 0 ? void 0 : zkReveal.proofs) === null || _b === void 0 ? void 0 : _b.length) {
                const result = await (0, utils_1.verifyZkPacket)({
                    ciphertext: content,
                    zkReveal,
                    logger,
                    cipherSuite,
                    zkEngine: zkEngine,
                    iv: sender === api_1.TranscriptMessageSenderType
                        .TRANSCRIPT_MESSAGE_SENDER_TYPE_SERVER
                        ? serverIV
                        : clientIV,
                    recordNumber: isServer
                        ? serverRecordNumber
                        : clientRecordNumber
                });
                plaintext = result.redactedPlaintext;
                redacted = false;
                plaintextLength = plaintext.length;
            }
            else {
                plaintext = content;
                plaintextLength = plaintext.length;
            }
            decryptedTranscript.push({
                sender: sender === api_1.TranscriptMessageSenderType
                    .TRANSCRIPT_MESSAGE_SENDER_TYPE_CLIENT
                    ? 'client'
                    : 'server',
                redacted,
                message: plaintext,
                recordHeader,
                plaintextLength,
            });
        }
        catch (error) {
            throw new utils_1.AttestorError('ERROR_INVALID_CLAIM', `error in handling packet at idx ${i}: ${error}`, {
                packetIdx: i,
                error: error,
            });
        }
    }
}
function getWithoutHeader(message) {
    // strip the record header (xx 03 03 xx xx)
    return message.slice(5);
}
//# sourceMappingURL=data:application/json;base64,