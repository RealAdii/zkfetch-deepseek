"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentMemoryUsage = getCurrentMemoryUsage;
exports.generateRpcRequestId = generateRpcRequestId;
exports.getWsApiUrlFromLocation = getWsApiUrlFromLocation;
exports.mapToCreateClaimResponse = mapToCreateClaimResponse;
exports.waitForResponse = waitForResponse;
const ethers_1 = require("ethers");
const config_1 = require("../config");
const utils_1 = require("../utils");
// track memory usage
async function getCurrentMemoryUsage() {
    if (!window.crossOriginIsolated) {
        return {
            available: false,
            content: 'N/A (page not cross-origin-isolated)'
        };
    }
    else if (!performance.measureUserAgentSpecificMemory) {
        return {
            available: false,
            content: 'N/A (performance.measureUserAgentSpecificMemory() is not available)',
        };
    }
    else {
        try {
            const result = await performance.measureUserAgentSpecificMemory();
            const totalmb = Math.round(result.bytes / 1024 / 1024);
            return {
                available: true,
                content: `${totalmb}mb`,
            };
        }
        catch (error) {
            if (error instanceof DOMException && error.name === 'SecurityError') {
                return {
                    available: false,
                    content: `N/A (${error.message})`,
                };
            }
            throw error;
        }
    }
}
function generateRpcRequestId() {
    return Math.random().toString(36).slice(2);
}
/**
 * The window RPC will be served from the same origin as the API server.
 * so we can get the API server's origin from the location.
 */
function getWsApiUrlFromLocation() {
    const { host, protocol } = location;
    const wsProtocol = protocol === 'https:' ? 'wss:' : 'ws:';
    return `${wsProtocol}//${host}${config_1.WS_PATHNAME}`;
}
function mapToCreateClaimResponse(res) {
    if (!res.claim) {
        throw utils_1.AttestorError.fromProto(res.error);
    }
    return {
        identifier: (0, utils_1.getIdentifierFromClaimInfo)(res.claim),
        claimData: res.claim,
        witnesses: [
            {
                id: res.signatures.attestorAddress,
                url: getWsApiUrlFromLocation()
            }
        ],
        signatures: [
            ethers_1.ethers.utils
                .hexlify(res.signatures.claimSignature)
                .toLowerCase()
        ]
    };
}
function waitForResponse(type, requestId, bridge, timeoutMs = 60000) {
    const returnType = `${type}Done`;
    return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
            reject(new utils_1.AttestorError('ERROR_INTERNAL', `Timeout waiting for response: ${type}`, { requestId }));
            cancel();
        }, timeoutMs);
        const cancel = bridge.onMessage(msg => {
            if (msg.id !== requestId) {
                return;
            }
            if (msg.type === 'error') {
                reject(new Error(msg.data.message));
            }
            else if (msg.type === returnType) {
                resolve(msg.response);
            }
            else {
                return;
            }
            clearTimeout(timeout);
            cancel();
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2luZG93LXJwYy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU9BLHNEQStCQztBQUVELG9EQUVDO0FBTUQsMERBSUM7QUFFRCw0REFzQkM7QUFFRCwwQ0FxQ0M7QUFuSEQsbUNBQStCO0FBQy9CLHVDQUF3QztBQUV4QyxxQ0FBcUU7QUFHckUscUJBQXFCO0FBQ2QsS0FBSyxVQUFVLHFCQUFxQjtJQUMxQyxJQUFHLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDaEMsT0FBTztZQUNOLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLE9BQU8sRUFBRSxzQ0FBc0M7U0FDL0MsQ0FBQTtJQUNGLENBQUM7U0FBTSxJQUFHLENBQUMsV0FBVyxDQUFDLDhCQUE4QixFQUFFLENBQUM7UUFDdkQsT0FBTztZQUNOLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLE9BQU8sRUFBRSxxRUFBcUU7U0FDOUUsQ0FBQTtJQUNGLENBQUM7U0FBTSxDQUFDO1FBQ1AsSUFBSSxDQUFDO1lBQ0osTUFBTSxNQUFNLEdBQUcsTUFBTSxXQUFXLENBQUMsOEJBQThCLEVBQUUsQ0FBQTtZQUNqRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFBO1lBRXRELE9BQU87Z0JBQ04sU0FBUyxFQUFFLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLEdBQUcsT0FBTyxJQUFJO2FBQ3ZCLENBQUE7UUFDRixDQUFDO1FBQUMsT0FBTSxLQUFLLEVBQUUsQ0FBQztZQUNmLElBQUcsS0FBSyxZQUFZLFlBQVksSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGVBQWUsRUFBRSxDQUFDO2dCQUNwRSxPQUFPO29CQUNOLFNBQVMsRUFBRSxLQUFLO29CQUNoQixPQUFPLEVBQUUsUUFBUSxLQUFLLENBQUMsT0FBTyxHQUFHO2lCQUNq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